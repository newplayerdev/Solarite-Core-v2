<?php


namespace NewPlayerMC\items;


use pocketmine\block\Block;
use pocketmine\block\BlockToolType;
use pocketmine\entity\Effect;
use pocketmine\entity\EffectInstance;
use pocketmine\entity\Entity;
use pocketmine\item\Item;
use pocketmine\item\Pickaxe;
use pocketmine\item\TieredTool;
use pocketmine\math\Vector3;
use pocketmine\Player;
use const Couchbase\ENCODER_FORMAT_IGBINARY;

class Hammer extends Pickaxe
{
    private $player;

    public function __construct()
    {
        parent::__construct(745, 0, "Hammer", TieredTool::TIER_WOODEN);
        $nbt = $this->getNamedTag();
        $this->setNamedTag($nbt);
    }

    public function getMaxDurability(): int
    {
        return 1985;
    }

    public function getMaxStackSize(): int
    {
        return 1;
    }

    public function getMiningEfficiency(Block $block): float
    {
        return parent::getMiningEfficiency($block) * 0.6;
    }

    protected function getBaseMiningEfficiency(): float
    {
        return 9; // TODO: Change the autogenerated stub
    }

    public function isUnbreakable(): bool
    {
        return false;
    }

    public function onActivate(Player $player, Block $blockReplace, Block $blockClicked, int $face, Vector3 $clickVector): bool
    {
        $this->player = $player;
        return parent::onActivate($player, $blockReplace, $blockClicked, $face, $clickVector); // TODO: Change the autogenerated stub
    }

    public function onReleaseUsing(Player $player): bool
    {
        $this->player = null;
        return parent::onReleaseUsing($player); // TODO: Change the autogenerated stub
    }

    public function onDestroyBlock(Block $block) : bool{
        if($block->getHardness() > 0){
            $this->addB($block);
            $nbt = $this->getNamedTag();
            $durability = $nbt->getInt("Durabilitée", $this->getMaxDurability());
            if($durability - 2 > 0){
                $durability -= 2;
                $this->setNamedTag($nbt);
            }
            else{
                $this->onBroken();
            }
            return false;
        }
        return false;
    }



    public function onAttackEntity(Entity $victim) : bool{
        $nbt = $this->getNamedTag();
        $durability = $nbt->getInt("Durabilitée", $this->getMaxDurability());
        if($durability - 2 > 0){
            $durability -= 2;
        }
        else{
            $this->onBroken();
        }
        return true;
    }


    private function addB(Block $blocks){
        $minX = $blocks->x - 1;
        $maxX = $blocks->x + 1;

        $minY = $blocks->y - 1;
        $maxY = $blocks->y + 1;

        $minZ = $blocks->z - 1;
        $maxZ = $blocks->z + 1;

        for ($x = $minX; $x <= $maxX; $x++) {

            for ($y = $minY; $y <= $maxY; $y++) {

                for ($z = $minZ; $z <= $maxZ; $z++) {
                    $block = $blocks->getLevel()->getBlockAt($x,$y,$z);
                    $item = Item::get(Item::WOODEN_PICKAXE);
                    $block->getLevel()->useBreakOn($block,$item);

                }

            }

        }

    }

}